#include <stdio.h>
#include <stdlib.h>
int count = 0;
struct node
{
    int ssn;
    float sal;
    char name[50], dept[20], design[10], phon[11];
    struct node *rlink;
    struct node *llink;
};
typedef struct node *NODE;
NODE first = NULL;
NODE create()
{
    NODE temp;
    temp = (NODE)malloc(sizeof(struct node));
    printf("Enter the employee details\n");
    printf("Enter the employee name\n");
    scanf("%s", temp->name);
    printf("Enter the ssn\n");
    scanf("%d", &temp->ssn);
    printf("Enter the department\n");
    scanf("%s", temp->dept);
    printf("ENter the designation\n");
    scanf("%s", temp->design);
    printf("Enter the salary\n");
    scanf("%f", &temp->sal);
    printf("Enter the phone number\n");
    scanf("%s", temp->phon);
    temp->rlink = NULL;
    temp->llink = NULL;
    count++;
    return temp;
}
void insert_front()
{
    NODE temp;
    temp = create();
    if (first == NULL)
    {
        first = temp;
    }
    else
    {
        temp->rlink = first;
        first->llink = temp;
        first = temp;
    }
}
void insert_rear()
{
    NODE cur, temp;
    temp = create();
    if (first = NULL)
    {
        first = temp;
    }
    else
    {
        cur = first;
        while (cur->rlink != NULL)
        {
            cur = cur->rlink;
        }
        cur->rlink = temp;
        temp->llink = cur;
    }
}
void delete_front()
{
    NODE temp;
    if (first == NULL)
    {
        printf("list is empty\n");
        return;
    }
    else if (first->rlink == NULL)
    {
        display_deleted(first);
        free(first);
        first = NULL;
    }
    else
    {
        temp = first;
        first = first->rlink;
        first->llink = NULL;
        temp->rlink = NULL;
        display_deleted(temp);
        free(temp);
        temp = NULL;
    }
}
void delete_rear()
{
    NODE cur, prev;
    if (first == NULL)
    {
        printf("list is empty\n");
        return;
    }
    else if (first->rlink == NULL)
    {
        display_deleted(first);
        free(first);
        first = NULL;
    }
    else
    {
        cur = first;
        while (cur->rlink != NULL)
        {
            prev = cur;
            cur = cur->rlink;
        }
        prev->rlink = NULL;
        display_deleted(cur);
        cur->rlink = NULL;
        cur->llink = NULL;
        free(cur);
        cur = NULL;
    }
}
void display()
{
    NODE cur;
    if (first == NULL)
    {
        printf("List is empty\n");
    }
    else
    {
        cur = first;
        printf("The employee details are:\n");
        printf("SSN\tName\tdept\tdesignation\tsalary\tphone number\n");
        while (cur != NULL)
        {
            printf("%d\t%s\t%s\t%s\t%f\t%s\n", cur->ssn, cur->name, cur->dept, cur->design, cur->sal, cur->phon);
            cur = cur->rlink;
        }
    }
    printf("NO of employees %d\n", count);
}
void display_deleted(NODE cur)
{
    printf("The following emplot=yee details is deleted\n");
    printf("SSN\tName\tdept\tdesignation\tsalary\tphone number\n");
    printf("%d\t%s\t%s\t%s\t%f\t%s\n", cur->ssn, cur->name, cur->dept, cur->design, cur->sal, cur->phon);
}
void main()
{
    int choice, n, i;
    while (1)
    {
        choice = 0;
        printf("-----MENU-----\n");
        printf("1.Create a SLL\n2.Display\n3.Insert_front\n4.Insert_rear\n5.Delete_front\n6.Delete_rear\n7.Exit\n");
        printf("Enter your choice\n");
        scanf("%d", &choice);
        switch ((choice))
        {
        case 1:
            printf("Enter the number of students\n");
            scanf("%d", &n);
            for (i = 0; i < n; i++)
            {
                insert_front();
            }
            break;
        case 2:
            display();
            break;
        case 3:
            insert_front();
            break;
        case 4:
            insert_rear();
            break;
        case 5:
            delete_front();
            break;
        case 6:
            delete_rear();
            break;
        case 7:
            exit(0);
        default:
            printf("Invalid choice\n");
            break;
        }
    }
}
